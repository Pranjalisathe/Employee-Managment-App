{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"components-app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Column 1\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Column 2\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Column 3\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Column 4\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Column 5\")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache) {\n  const _component_pagination = _resolveComponent(\"pagination\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"table\", null, [_hoisted_2, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.data, row => {\n    return _openBlock(), _createElementBlock(\"tr\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, col => {\n      return _openBlock(), _createElementBlock(\"td\", null, _toDisplayString(col), 1 /* TEXT */);\n    }), 256 /* UNKEYED_FRAGMENT */))]);\n  }), 256 /* UNKEYED_FRAGMENT */))])]), _createVNode(_component_pagination, {\n    modelValue: _ctx.page,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.page = $event),\n    \"rows-number\": _ctx.rows,\n    \"rows-per-page\": 5\n  }, null, 8 /* PROPS */, [\"modelValue\", \"rows-number\"])]);\n}","map":{"version":3,"mappings":";;EACKA,EAAE,EAAC;AAAgB;gCAEhBC,oBAQQ,6BAPJA,oBAMK,0BALDA,oBAAiB,YAAb,UAAQ,gBACZA,oBAAiB,YAAb,UAAQ,gBACZA,oBAAiB,YAAb,UAAQ,gBACZA,oBAAiB,YAAb,UAAQ,gBACZA,oBAAiB,YAAb,UAAQ;;;;uBAR5BC,oBAwBM,OAxBNC,UAwBM,GAvBFF,oBAiBQ,gBAhBJG,UAQQ,EACRH,oBAMQ,mCALJC,oBAIKG,6BAJaC,SAAI,EAAXC,GAAG;yBAAdL,oBAIK,gCAHDA,oBAEKG,6BAFaE,GAAG,EAAVC,GAAG;2BAAdN,oBAEK,6BADEM,GAAG;;wCAKtBC,aAIEC;gBAHWJ,SAAI;+DAAJA,SAAI;IACZ,aAAW,EAAEA,SAAI;IACjB,eAAa,EAAE","names":["id","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_Fragment","_ctx","row","col","_createVNode","_component_pagination"],"sourceRoot":"","sources":["/home/pranjalisathe/Desktop/employeeDetailsApi-main/src/components/PaginDz.vue"],"sourcesContent":["<template>\n<div id=\"components-app\">\n    <table>\n        <thead>\n            <tr>\n                <th>Column 1</th>\n                <th>Column 2</th>\n                <th>Column 3</th>\n                <th>Column 4</th>\n                <th>Column 5</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr v-for=\"row in data\">\n                <td v-for=\"col in row\">\n                    {{ col }}\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <pagination \n        v-model=\"page\"\n        :rows-number=\"rows\"\n        :rows-per-page=\"5\"\n    />\n</div>\n</template>\n\n<script>\n\nexport default {\n    name:\"PaginDz\",\n    const ComponentsApp = {\n    data() {\n        return {\n            page: 1,\n            rows: 0,\n            loading: true,\n            data: [],\n        };\n    },\n    methods: {\n        fetchData() {\n            this.loading = true;\n            \n            setTimeout(() => {\n                this.buildFiller(this.page)\n                    .then((data) => {\n                        this.data = data;\n                        this.rows = 50;\n                        this.loading = false;\n                    });\n            }, 300);\n        },\n        buildFiller(page) {\n            return new Promise((resolve) => {\n                let buffer = [];\n                for (let i = 0; i < 5; i++) {\n                    buffer.push(\n                        [\n                            `Data(${page})`,\n                            `Data(${page})`,\n                            `Data(${page})`,\n                            `Data(${page})`,\n                            `Data(${page})`,\n                        ]\n                    );\n                }\n                resolve(buffer);\n            });\n        }\n    },\n    watch: {\n        page(value) {\n            this.fetchData();\n        }\n    },\n    mounted() {\n        this.fetchData();\n    }\n};\n/*Example App END*/\nconst app = Vue.createApp(ComponentsApp);\n\napp.component('pagination', {\n    props: {\n        modelValue: {\n            type: Number,\n            default: () => 1,\n        },\n        rowsNumber: {\n            type: Number,\n            default: () => 0,\n        },\n        rowsPerPage: {\n            type: Number,\n            default: () => 0,\n        },\n        maxVisible: {\n            // Max buttons in a row\n            type: Number,\n            default: () => 5,\n        },\n    },\n    template: `<ul class=\"pagination\">\n    <li class=\"page-item\">\n        <a class=\"page-link\" @click=\"onPageBack\">\n            <i class=\"fas fa-angle-left\" ></i>\n        </a>\n    </li>\n\n    <template v-for=\"(i, y) in pages\">\n        <li v-if=\"y < maxVisible\" :key=\"'pagination-page-' + i\" :class=\"{ 'page-item': 1, active: modelValue == i }\">\n            <a class=\"page-link\" @click=\"onPageClick(i)\">{{ i }}</a>\n        </li>\n    </template>\n\n    <li class=\"page-item\" >\n        <a class=\"page-link\" @click=\"onPageForward\">\n            <i class=\"fas fa-angle-right\"></i>\n        </a>\n    </li>\n</ul>`,\n    computed: {\n        pages() {\n            function range(start, end) {\n                return Array.from(Array(end - start + 1), (_, i) => i + start);\n            }\n\n            const max = this.maxVisible;\n            const middle = Math.floor(this.maxVisible / 2);\n            const pageNum = Math.ceil(this.rowsNumber / this.rowsPerPage);\n\n            if (pageNum < max) {\n                return range(1, pageNum);\n            }\n\n            let start = this.modelValue - middle;\n            let end = this.modelValue + middle;\n\n            // If we're close to the end\n            if (this.modelValue >= pageNum - middle) {\n                start = pageNum - max + 1;\n                end = pageNum;\n            }\n\n            return range(Math.max(1, start), Math.max(end, max));\n        },\n    },\n    methods: {\n        onPageClick(page) {\n            this.$emit('update:modelValue', page);\n        },\n        onPageBack() {\n            if (this.modelValue - 1 >= 1) {\n                this.onPageClick(this.modelValue - 1);\n            }\n        },\n        onPageForward() {\n            if (\n                this.modelValue + 1 <=\n                Math.ceil(this.rowsNumber / this.rowsPerPage)\n            ) {\n                this.onPageClick(this.modelValue + 1);\n            }\n        },\n    },\n})\n\napp.mount('#components-app');\n\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}